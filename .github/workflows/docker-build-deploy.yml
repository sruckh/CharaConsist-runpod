name: Build and Deploy to Docker Hub

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'
      - 'memory/**'
      - 'coordination/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: 'false'
        type: boolean

env:
  DOCKER_REPOSITORY: gemneye/characonsist
  PLATFORMS: linux/amd64
  REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ env.PLATFORMS }}
        driver-opts: |
          network=host

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-,format=short
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYY-MM-DD'}},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=CharaConsist
          org.opencontainers.image.description=Fine-Grained Consistent Character Generation Container
          org.opencontainers.image.vendor=CharaConsist Project
          org.opencontainers.image.version={{version}}
          org.opencontainers.image.revision={{sha}}
          org.opencontainers.image.source={{url}}

    - name: Check Docker context
      run: |
        echo "Building Docker image with the following context:"
        echo "Repository: ${{ env.DOCKER_REPOSITORY }}"
        echo "Platform: ${{ env.PLATFORMS }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "SHA: ${{ github.sha }}"

    - name: Build Docker image (PR or test)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ env.PLATFORMS }}
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build and push Docker image (main branch)
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      id: build
      with:
        context: .
        platforms: ${{ env.PLATFORMS }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ github.event.inputs.force_rebuild != 'true' && 'type=gha' || '' }}
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false

    - name: Image digest and summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## üöÄ Docker Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Repository | \`${{ env.DOCKER_REPOSITORY }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | \`${{ env.PLATFORMS }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Digest | \`${{ steps.build.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Available Tags:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üê≥ Pull Command:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.DOCKER_REPOSITORY }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        echo "Testing Docker image functionality..."
        docker run --rm --platform ${{ env.PLATFORMS }} \
          ${{ env.DOCKER_REPOSITORY }}:latest \
          python -c "
        import sys
        print(f'Python version: {sys.version}')
        try:
            import torch
            print(f'PyTorch version: {torch.__version__}')
            print(f'CUDA available: {torch.cuda.is_available()}')
            import diffusers, transformers, accelerate
            print('‚úÖ All required packages imported successfully')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        "

    - name: Security scan (optional)
      if: github.event_name != 'pull_request'
      continue-on-error: true
      run: |
        echo "Running basic security checks..."
        docker run --rm --platform ${{ env.PLATFORMS }} \
          ${{ env.DOCKER_REPOSITORY }}:latest \
          bash -c "
        echo 'Checking for common vulnerabilities...'
        python -c 'import subprocess; subprocess.run([\"pip\", \"list\", \"--format=json\"], check=True)'
        echo '‚úÖ Basic security check completed'
        "

  cleanup:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()
    steps:
    - name: Cleanup build cache
      run: |
        echo "Cleaning up build artifacts..."
        docker system prune -f || true